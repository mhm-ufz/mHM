module test_pet
  use funit
  use mo_pet
  use mo_kind, only: dp
  use mo_constants, only: deg2rad_dp

  implicit none

  private

  public :: test_pet_hargreaves, test_pet_priestly, test_pet_penman, test_extraterr_rad_approx, &
            test_slope_satpressure, test_sat_vap_pressure

  real(dp) :: t = 0.001_dp

contains

  @test
  subroutine test_pet_hargreaves()

    real(dp) :: reference = 1349.437_dp
    real(dp) :: calc_pet

    calc_pet = pet_hargreaves(0.8_dp, 17.8_dp, 12.0_dp, 20.0_dp, 8.0_dp, 23.1637_dp, 150)
    @assertEqual(reference, calc_pet, tolerance=t, message='PET Hargreaves-Sammani')

  end subroutine test_pet_hargreaves

  @test
  subroutine test_pet_priestly()

    real(dp) :: reference = 4.978_dp
    real(dp) :: calc_pet

    calc_pet = pet_priestly(1.26_dp, 200.0_dp, 10.0_dp)
    @assertEqual(reference, calc_pet, tolerance=t, message='PET Priestley-Taylor')

    reference = 0.0_dp
    calc_pet = pet_priestly(1.26_dp, 0.0_dp, 10.0_dp)
    @assertEqual(reference, calc_pet, tolerance=t, message='PET Priestley-Taylor, rn = 0')

  end subroutine test_pet_priestly

  @test
  subroutine test_pet_penman()

    real(dp) :: reference = 1.074_dp
    real(dp) :: calc_pet

    calc_pet = pet_penman(200.0_dp, 10.0_dp, 1.7_dp, 60.0_dp, 70.0_dp, 1.0_dp, 1.0_dp)
    @assertEqual(reference, calc_pet, tolerance=t, message='PET Penman-Monteith')

    reference = 0.0_dp
    calc_pet = pet_penman(200.0_dp, 10.0_dp, 1.7_dp, 60.0_dp, 70.0_dp, 0.0_dp, 1.0_dp)
    @assertEqual(reference, calc_pet, tolerance=t, message='PET Penman-Monteith, a_s=0')

  end subroutine test_pet_penman

  @test
  subroutine test_extraterr_rad_approx()

    real(dp) :: reference = 16.34_dp
    real(dp) :: calc_extraerr

    calc_extraerr = extraterr_rad_approx(150_i4, deg2rad_dp*23.1637_dp)
    @assertEqual(reference, calc_extraerr, tolerance=t, message='Approx. extraterrestrial radiation')

  end subroutine test_extraterr_rad_approx

  @test
  subroutine test_slope_satpressure()

    real(dp) :: reference = 0.082_dp
    real(dp) :: calc_slope

    calc_slope = slope_satpressure(10._dp)
    @assertEqual(reference, calc_slope, tolerance=t, message='slope of saturation vapour pressure curve')

  end subroutine test_slope_satpressure

  @test
  subroutine test_sat_vap_pressure()

    real(dp) :: reference = 1.228_dp
    real(dp) :: calc_sat

    calc_sat = sat_vap_pressure(10._dp)
    @assertEqual(reference, calc_sat, tolerance=t, message='saturation vapour pressure')

  end subroutine test_sat_vap_pressure

end module test_pet
