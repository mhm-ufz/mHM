module test_canopy_interc
  use funit
  use mo_canopy_interc
  use mo_kind, only: dp

  implicit none

  private

  public :: test_canopy_inter

  real(dp) :: t = 0.001_dp

contains

  @test
  subroutine test_canopy_inter()

    real(dp) :: ref_interc, ref_throughfall, ref_evap_canopy
    real(dp) :: res_interc, res_throughfall, res_evap_canopy

    ref_interc = 0.35_dp
    ref_throughfall = 0.285_dp
    ref_evap_canopy = 0.1_dp
    res_interc = 0.345_dp

    call canopy_interc(0.1_dp, 0.45_dp, 0.39_dp, res_interc, res_throughfall, res_evap_canopy)
    @assertEqual(ref_interc, res_interc, tolerance=t, message='intercep, realistic values')
    @assertEqual(ref_throughfall, res_throughfall, tolerance=t, message='throughfall, realistic values')
    @assertEqual(ref_evap_canopy, res_evap_canopy, tolerance=t, message='evap_canopy, realistic values')

    ref_interc = 0.0_dp
    ref_throughfall = 0.0_dp
    ref_evap_canopy = -0.045_dp
    res_interc = 0.345_dp

    call canopy_interc(0.1_dp, 0.45_dp, -0.39_dp, res_interc, res_throughfall, res_evap_canopy)
    @assertEqual(ref_interc, res_interc, tolerance=t, message='interc, neg. precip')
    @assertEqual(ref_throughfall, res_throughfall, tolerance=t, message='throughfall, neg. precip')
    @assertEqual(ref_evap_canopy, res_evap_canopy, tolerance=t, message='evap_canopy, neg. precip')

    ref_interc = 0.0_dp
    ref_throughfall = 1.185_dp
    ref_evap_canopy = -0.45_dp
    res_interc = 0.345_dp

    call canopy_interc(0.1_dp, -0.45_dp, 0.39_dp, res_interc, res_throughfall, res_evap_canopy)
    @assertEqual(ref_interc, res_interc, tolerance=t, message='interc, neg. interc_max')
    @assertEqual(ref_throughfall, res_throughfall, tolerance=t, message='throughfall, neg. interc_max')
    @assertEqual(ref_evap_canopy, res_evap_canopy, tolerance=t, message='evap_canopy, neg. interc_max')

  end subroutine test_canopy_inter

end module test_canopy_interc

