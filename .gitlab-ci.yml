# to use the env-var "GIT_CLONE_PATH", set the following in
# ./gitlab-runner/config.toml under [[runners]]:
#   [runners.custom_build_dir]
#     enabled = true
# This will prevent git clone conflicts for jobs ran in parallel

variables:
  GIT_DEPTH: 10

stages:
  - info
  - build
  - valgrind
  - check-cases
  - code-analysis
  - deploy

show-env-vars:
  stage: info
  variables:
    GIT_STRATEGY: none
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME
    SEP: "##################################################################"
    S00: "commit date - "
    S01: "project: ${CI_PROJECT_PATH}"
    S02: "branch: ${CI_COMMIT_REF_NAME}"
    S03: "commit: ${CI_COMMIT_SHA}"
    S04: "commit msg: ${CI_COMMIT_MESSAGE}"
    S05: "clone base path: "
    S06: "runner token: ${CI_RUNNER_SHORT_TOKEN}"
  script:
    - echo -e "${SEP}\n${S00}$(date)\n${SEP}\n${S01}\n${S02}\n${S03}\n${S04}\n${SEP}\n${S05}${GIT_CLONE_PATH}\n${S06}\n${SEP}"

documentation:
  only:
    - develop
  stage: build
  variables:
    GIT_DEPTH: 0
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
    GIT_FETCH_EXTRA_FLAGS: --all --no-tags --prune --quiet
  script:
    - module load foss/2019b
    - module load texlive/2019
    - module load Graphviz/2.42.2
    - module load Anaconda3
    - source activate /global/apps/mhm_checks/mhm_env
    # use doxygen from the mhm_env conda environment
    - doxygen doc/doxygen.config > doxygen_log_dev.txt
    # create pdf documentation
    - cd latex/ && make > ../doxygen_latex_dev.txt
    - cp refman.pdf ../html/mhm_doc.pdf
    - cp refman.pdf ../mhm_doc_dev.pdf
    - cd .. && mv html html_dev
    - mv doxygen_warn.txt doxygen_warn_dev.txt
    - rm -rf latex
    # same for master
    - git checkout master
    - doxygen doc/doxygen.config > doxygen_log_mas.txt
    - cd latex/ && make > ../doxygen_latex_mas.txt
    - cp refman.pdf ../html/mhm_doc.pdf
    - cp refman.pdf ../mhm_doc_mas.pdf
    - cd .. && mv html html_mas
    # care about warnings file (maybe missing on master)
    - mv doxygen_warn.txt doxygen_warn_mas.txt
  artifacts:
    name: "$CI_COMMIT_REF_NAME"
    paths:
      - html_dev
      - mhm_doc_dev.pdf
      - doxygen_log_dev.txt
      - doxygen_latex_dev.txt
      - doxygen_warn_dev.txt
      - html_mas
      - mhm_doc_mas.pdf
      - doxygen_log_mas.txt
      - doxygen_latex_mas.txt
      - doxygen_warn_mas.txt
  when: always

cmake-nagfor62:
  stage: build
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  script:
    - source hpc-module-loads/eve.nagfor62
    - source CI-scripts/compile -DCMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX=64
    - source CI-scripts/compile_debug -DCMAKE_FIND_LIBRARY_CUSTOM_LIB_SUFFIX=64
  artifacts:
    paths:
    - mhm
    - mhm_debug

cmake-gfortran73:
  stage: build
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  script:
    - source hpc-module-loads/eve.gfortran73
    - source CI-scripts/compile
    - source CI-scripts/compile_debug
    - source CI-scripts/compile_OpenMP
    - source CI-scripts/compile_OpenMP_debug
  artifacts:
    paths:
    - mhm
    - mhm_debug
    - mhm_openmp
    - mhm_openmp_debug

cmake-gfortran73MPI:
  stage: build
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  script:
    - source hpc-module-loads/eve.gfortran73MPI
    - source CI-scripts/compile_MPI
    - source CI-scripts/compile_MPI_debug
  artifacts:
    paths:
    - mhm_mpi
    - mhm_mpi_debug

cmake-gfortran83:
  stage: build
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  script:
    - source hpc-module-loads/eve.gfortran83
    - source CI-scripts/compile
    - source CI-scripts/compile_debug
    - source CI-scripts/compile_OpenMP
    - source CI-scripts/compile_OpenMP_debug
  artifacts:
    paths:
    - mhm
    - mhm_debug
    - mhm_openmp
    - mhm_openmp_debug

cmake-gfortran83MPI:
  stage: build
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  script:
    - source hpc-module-loads/eve.gfortran83MPI
    - source CI-scripts/compile_MPI
    - source CI-scripts/compile_MPI_debug
  artifacts:
    paths:
    - mhm_mpi
    - mhm_mpi_debug

cmake-intel18:
  stage: build
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  script:
    - source hpc-module-loads/eve.intel18
    - source CI-scripts/compile
    - source CI-scripts/compile_debug
    - source CI-scripts/compile_OpenMP
    - source CI-scripts/compile_OpenMP_debug
  artifacts:
    paths:
    - mhm
    - mhm_debug
    - mhm_openmp
    - mhm_openmp_debug

cmake-intel18MPI:
  stage: build
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  script:
    - source hpc-module-loads/eve.intel18MPI
    - source CI-scripts/compile_MPI
    - source CI-scripts/compile_MPI_debug
  artifacts:
    paths:
    - mhm_mpi
    - mhm_mpi_debug

cmake-intel19:
  stage: build
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  script:
    - source hpc-module-loads/eve.intel19
    - source CI-scripts/compile
    - source CI-scripts/compile_debug
    - source CI-scripts/compile_OpenMP
    - source CI-scripts/compile_OpenMP_debug
  artifacts:
    paths:
    - mhm
    - mhm_debug
    - mhm_openmp
    - mhm_openmp_debug

cmake-intel19MPI:
  stage: build
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  script:
    - source hpc-module-loads/eve.intel19MPI
    - source CI-scripts/compile_MPI
    - source CI-scripts/compile_MPI_debug
  artifacts:
    paths:
    - mhm_mpi
    - mhm_mpi_debug

# only check latest compiler versions with valgrind
# valgrind-gfortran73:
#   when: always
#   stage: valgrind
#   variables:
#     GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
#   needs:
#     - job: cmake-gfortran73
#       artifacts: true
#   script:
#     - source hpc-module-loads/eve.gfortran73
#     - module load Anaconda3
#     - source activate /global/apps/mhm_checks/mhm_env
#     - valgrind --version
#     - valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose ./mhm_debug
#     # execute mem-use check
#     - valgrind --tool=massif --stacks=yes --time-unit=i --massif-out-file=massif.out.0 ./mhm_debug
#     - ms_print massif.out.0
#   artifacts:
#     paths:
#     - massif.out.0
#
# valgrind-intel18:
#   when: always
#   stage: valgrind
#   variables:
#     GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
#   needs:
#     - job: cmake-intel18
#       artifacts: true
#   script:
#     - source hpc-module-loads/eve.intel18
#     - module load Anaconda3
#     - source activate /global/apps/mhm_checks/mhm_env
#     - valgrind --version
#     - valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose ./mhm_debug
#     # execute mem-use check
#     - valgrind --tool=massif --stacks=yes --time-unit=i --massif-out-file=massif.out.0 ./mhm_debug
#     - ms_print massif.out.0
#   artifacts:
#     paths:
#     - massif.out.0

valgrind-nagfor62:
  when: always
  stage: valgrind
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  needs:
    - job: cmake-nagfor62
      artifacts: true
  script:
    - source hpc-module-loads/eve.nagfor62
    - module load Anaconda3
    - source activate /global/apps/mhm_checks/mhm_env
    - valgrind --version
    - valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose ./mhm_debug
    # execute mem-use check
    - valgrind --tool=massif --stacks=yes --time-unit=i --massif-out-file=massif.out.0 ./mhm_debug
    - ms_print massif.out.0
  artifacts:
    paths:
    - massif.out.0

valgrind-gfortran83:
  when: always
  stage: valgrind
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  needs:
    - job: cmake-gfortran83
      artifacts: true
  script:
    - source hpc-module-loads/eve.gfortran83
    - module load Anaconda3
    - source activate /global/apps/mhm_checks/mhm_env
    - valgrind --version
    - valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose ./mhm_debug
    # execute mem-use check
    - valgrind --tool=massif --stacks=yes --time-unit=i --massif-out-file=massif.out.0 ./mhm_debug
    - ms_print massif.out.0
  artifacts:
    paths:
    - massif.out.0

valgrind-intel19:
  when: always
  stage: valgrind
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  needs:
    - job: cmake-intel19
      artifacts: true
  script:
    - source hpc-module-loads/eve.intel19
    - module load Anaconda3
    - source activate /global/apps/mhm_checks/mhm_env
    - valgrind --version
    - valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes --verbose ./mhm_debug
    # execute mem-use check
    - valgrind --tool=massif --stacks=yes --time-unit=i --massif-out-file=massif.out.0 ./mhm_debug
    - ms_print massif.out.0
  artifacts:
    paths:
    - massif.out.0

check-nagfor62:
  when: always
  stage: check-cases
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  needs:
    - job: cmake-nagfor62
      artifacts: true
  script:
    - source hpc-module-loads/eve.nagfor62
    - source CI-scripts/pre_check
    - python -u run_mhm_checks.py -l logs -e ../mhm
  artifacts:
    when: always
    paths:
    - check/logs/

check-nagfor62DEBUG:
  when: always
  stage: check-cases
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  needs:
    - job: cmake-nagfor62
      artifacts: true
  script:
    - source hpc-module-loads/eve.nagfor62
    - source CI-scripts/pre_check
    # skip cases with optimization due to overflow in the random-number-generator (NAG uses -ieee=stop in DEBUG)
    - python -u run_mhm_checks.py -l logs -e ../mhm_debug -s case_03 case_06 case_07 case_08 case_11
  artifacts:
    when: always
    paths:
    - check/logs/

check-gfortran73:
  when: always
  stage: check-cases
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  needs:
    - job: cmake-gfortran73
      artifacts: true
  script:
    - source hpc-module-loads/eve.gfortran73
    - source CI-scripts/pre_check
    - python -u run_mhm_checks.py -l logs -e ../mhm_debug ../mhm ../mhm_openmp_debug ../mhm_openmp -t 4
  artifacts:
    when: always
    paths:
    - check/logs/

check-gfortran73MPI:
  when: always
  stage: check-cases
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  needs:
    - job: cmake-gfortran73MPI
      artifacts: true
  script:
    - source hpc-module-loads/eve.gfortran73MPI
    - source CI-scripts/pre_check
    - python -u run_mhm_checks.py -l logs -e ../mhm_mpi_debug ../mhm_mpi -m 4
  artifacts:
    when: always
    paths:
    - check/logs/

check-gfortran83:
  when: always
  stage: check-cases
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  needs:
    - job: cmake-gfortran83
      artifacts: true
  script:
    - source hpc-module-loads/eve.gfortran83
    - source CI-scripts/pre_check
    - python -u run_mhm_checks.py -l logs -e ../mhm_debug ../mhm ../mhm_openmp_debug ../mhm_openmp -t 4
  artifacts:
    when: always
    paths:
    - check/logs/

check-gfortran83MPI:
  when: always
  stage: check-cases
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  needs:
    - job: cmake-gfortran83MPI
      artifacts: true
  script:
    - source hpc-module-loads/eve.gfortran83MPI
    - source CI-scripts/pre_check
    - python -u run_mhm_checks.py -l logs -e ../mhm_mpi_debug ../mhm_mpi -m 4
  artifacts:
    when: always
    paths:
    - check/logs/

check-intel18:
  when: always
  stage: check-cases
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  needs:
    - job: cmake-intel18
      artifacts: true
  script:
    - source hpc-module-loads/eve.intel18
    - source CI-scripts/pre_check
    - python -u run_mhm_checks.py -l logs -e ../mhm_debug ../mhm ../mhm_openmp_debug ../mhm_openmp -t 4
  artifacts:
    when: always
    paths:
    - check/logs/

check-intel18MPI:
  when: always
  stage: check-cases
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  needs:
    - job: cmake-intel18MPI
      artifacts: true
  script:
    - source hpc-module-loads/eve.intel18MPI
    - source CI-scripts/pre_check
    - python -u run_mhm_checks.py -l logs -e ../mhm_mpi_debug ../mhm_mpi -m 4
  artifacts:
    when: always
    paths:
    - check/logs/

check-intel19:
  when: always
  stage: check-cases
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  needs:
    - job: cmake-intel19
      artifacts: true
  script:
    - source hpc-module-loads/eve.intel19
    - source CI-scripts/pre_check
    - python -u run_mhm_checks.py -l logs -e ../mhm_debug ../mhm ../mhm_openmp_debug ../mhm_openmp -t 4
  artifacts:
    when: always
    paths:
    - check/logs/

check-intel19MPI:
  when: always
  stage: check-cases
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  needs:
    - job: cmake-intel19MPI
      artifacts: true
  script:
    - source hpc-module-loads/eve.intel19MPI
    - source CI-scripts/pre_check
    - python -u run_mhm_checks.py -l logs -e ../mhm_mpi_debug ../mhm_mpi -m 4
  artifacts:
    when: always
    paths:
    - check/logs/

unittest-gfortran83:
  when: always
  stage: code-analysis
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  needs:
    - job: cmake-gfortran83
  script:
    # we need pfUnit
    - source hpc-module-loads/eve.gfortran83
    # create build folder
    - mkdir build && cd build
    # run cmake with testing support and build mhm
    - cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_TESTING=ON ..
    - make -j 4
    # run all pfUnit tests in src/tests
    - ctest -V

coverage-gfortran73:
  when: always
  stage: code-analysis
  variables:
    GIT_CLONE_PATH: $CI_BUILDS_DIR/$CI_RUNNER_SHORT_TOKEN/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME/$CI_JOB_NAME
  needs:
    - job: check-gfortran73
  script:
    # gcov is part of GCC
    - source hpc-module-loads/eve.gfortran73
    # we need lcov from the conda environment to create html sites
    - module load Anaconda3
    - source activate /global/apps/mhm_checks/mhm_env
    # create build folder
    - mkdir build && cd build
    # run cmake with coverage support
    - cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_WITH_COVERAGE=ON ..
    # run all check-case for coverage calculation
    - make mhm_coverage_CI
    # copy the output to a top-level folder
    - cd .. && mkdir coverage
    - cp build/mhm_coverage_CI/* coverage -R
  artifacts:
    when: always
    paths:
    - coverage

pages:
  only:
    - develop
  stage: deploy
  dependencies:
    - documentation
    - coverage-gfortran73
  script:
    # create public dir (remove if already present)
    - test -d public && rm -rf public
    - mkdir -p public
    # create the subdir
    - mkdir public/stable/
    - mkdir public/latest/
    # copy the doxygen generated html page to the public site
    - cp html_mas/* public/stable/ -R
    - cp html_dev/* public/latest/ -R
    # create an index.html that redirects to the master documentation (in master folder)
    - cp doc/html_files/index.html public/
    # create the coverage site
    - mkdir -p public/coverage
    - cp coverage/* public/coverage/ -R
  artifacts:
    name: "$CI_COMMIT_REF_NAME"
    paths:
      - public
  when: always
